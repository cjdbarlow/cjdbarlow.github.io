{
  "hash": "01fb8be0eac9d2a55de242c4b9e0ca06",
  "result": {
    "markdown": "---\ntitle: \"Plotting Bayesian Intervals using ggPlot\"\ndate: 2024-3-21\ndescription: |\n  Using ggPlot without additional packages to cleanly plot Bayesian intervals on Beta distributions, including the Highest-Density Interval and the Region of Practical Equivalence.\n\nimage: assets/hdi/hdi_ai.jpg\n\ncategories:\n  - statistics\n  - bayes\n  - R\n  - ggPlot\n\nexecute:\n    warning: false\n    message: false\n    echo: true\n    freeze: auto \n---\n\n\nOne of the many reasons I like Bayesian inference is that key Bayesian summary statistics really lend themselves to graphical display. Well-done visualisations can demonstrate a huge amount of information in a very short amount of time, demonstrate complex relationships between different elements, and do so for audiences that don't have a grounding in statistics. Two of these are intervals: the Highest Density Interval (HDI), and the Region of Practical Equivalence (ROPE). The HDI is a type of credible interval^[A credible interval is a range of values in which we expect the true population parameter to fall.], and is the narrowest range of a probability distribution containing some probability density. For example, the 95% HDI contains 95% of the area under the curve (and therefore 95% of all possible outcomes), over the narrowest range of probabilities. The ROPE is a range of effect sizes that are clinically negligible. How much the HDI and the ROPE overlap give an indication of where our belief about a given intervention should fall.\n\nI've adopted R as my statistical language of choice, and use ggPlot for all but the most simple figures (and certainly for anything is that is going in a publication). One of my disappointments with ggPlot is that although it is easy to plot a probability density using the `geom_density()` function, the area under some part of the curve can't be shaded explicitly - it's an all or nothing thing. Although a few packages (e.g. [bayestestR](https://easystats.github.io/bayestestR) can plot credible intervals, they don't offer the flexibility of ggPlot in styling these figures.\n\n\n## Overview\n\n1. Use simulation to generate a posterior distribution\\\nWe will use calculate the posterior distribution for the difference between groups, i.e. the posterior for the effect size of an intervention.\n1. Calculate the HDI on the simulated data\n1. Derive the function that describes the posterior distribution\n1. Plot the area under part of the curve using `stat_function()`\n\n\n## Approach in Detail\n\nFirstly, we'll generate some data. We'll conduct a very simple simulation - we'll use a Beta(10, 10) distribution for both intervention and control groups, a reasonably narrow prior and an assumption of no difference between groups. Since this example is only going to look at the posterior distribution and it has a conjugate prior, we can avoid simulating the prior and just do the posterior. Before that though, we need to conduct a trial. The results are impressive: only half of the intervention group had the outcome, compared to three-quarters of the control group:\n\n\n:::column-margin\n\n::: {.cell}\n::: {.cell-output-display}\n![Beta(10,10) Prior Distribution](hdi_files/figure-html/unnamed-chunk-1-1.png){fig-alt='A beta(10, 10) prior distribution' width=672}\n:::\n:::\n\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Libraries\nlibrary(tidyverse)\n\n\n# Form some trial data\ntrial = tribble(\n  ~grp , ~event, ~n,\n  \"int\", 50   , 100,\n  \"con\", 75   , 100\n) |>\n  column_to_rownames(\"grp\")\n```\n:::\n\n\nThe beta posterior distribution incorporates the same shape values as the prior distribution, alongside the results of our trial^[This approach is overkill for this example, but I'm reusing code I've written for another paper.]. We'll merge this dataframe with the priors, and then calculate a prior for the difference of priors and posterior.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set conditions\nnSim = 10^5\n\n# Function to calculate the posterior distribution\nbeta_posterior = function(shape1, shape2, events, n.group, n.sim){\n  # Update the prior with events to get shape values for the posterior\n  post.alpha = shape1 + events\n  post.beta = shape2 + n.group - events\n  \n  # Calculate and return beta posterior\n  post = rbeta(n.sim, post.alpha, post.beta)\n  post\n}\n\n\n# Simulate posterior\nposterior = data.frame(\n  con = beta_posterior(shape1 = 10,\n                       shape2 = 10,\n                       events = trial[\"con\",]$event,\n                       n.group = trial[\"con\",]$n,\n                       n.sim = nSim),\n  int = beta_posterior(shape1 = 10,\n                       shape2 = 10,\n                       events = trial[\"int\",]$event,\n                       n.group = trial[\"int\",]$n,\n                       n.sim = nSim)\n  ) |>\n\t  mutate(diff = int - con)\n```\n:::\n\n\nNow we have a posterior distribution for the control and intervention groups, as well as the difference between them^[Differences should be calculated by randomly selecting one value from each distribution and taking the difference - but since each column was generated randomly we can simply subtract one from the other which makes this much easier.]. The next bit is where the magic happens - we'll calculate the function that approximates the distribution of effect size results, as well as the 95% HDI.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(HDInterval)\n\n# Calculate function of the difference in the posterior distribution using approxfun()\npostDiffFun = posterior |>\n  pull(diff) |>\n  density() |>\n  approxfun()\n\n\n# Calculate the highest density interval from the raw data\nhdi = posterior |>\n  select(diff) |>\n  HDInterval::hdi(credMass = 0.95) |>\n  unname() |>\n  round(digits = 2)\n```\n:::\n\n\nThe last stage is simple - plot the results. I've assumed a ROPE of 5% around a null effect.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = data.frame(x = c(-1, 1)),\n                      aes(x)) +\n  # Vertical line at 0\n  geom_vline(data = NULL,\n             xintercept = 0,\n             colour = \"black\",\n             alpha = 0.3) +\n  # Curve\n  stat_function(fun = postDiffFun,\n                geom = \"line\",\n                colour = \"#F8766D\") +\n  # HDI\n  stat_function(fun = postDiffFun,\n                aes(fill = \"95% HDI\",\n                    colour = \"95% HDI\"),\n                geom = \"area\",\n                xlim = c(hdi[1], hdi[2]),\n                alpha = 0.5) +\n  # ROPE\n  stat_function(fun = postDiffFun,\n                aes(fill = \"ROPE\",\n                    colour = \"ROPE\"),\n                geom = \"area\",\n                xlim = c(-0.05, 0.05),\n                alpha = 0.5) +\n  # Cosmetics\n  scale_x_continuous(expand = c(0, 0),\n                     limits = c(-0.5, 0.1),\n                     breaks = c(seq(-0.45, 0.05, 0.2), hdi, -0.05, 0, 0.05)) +\n  scale_y_continuous(limits=c(0, 8),\n                     expand=expansion(mult=c(0, 0.05))) +\n  theme_light() +\n  theme(axis.text.y = element_blank()) +\n  labs(x = expression(theta[1] - theta[2]),\n       fill = NULL,\n       colour = NULL,\n       linetype = NULL,\n       y = NULL)\n```\n\n::: {.cell-output-display}\n![](hdi_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nAlthough more wordy, this produces a much nicer graph than the Bayesian packages I have used and allows further manipulation of the graph using the extensive list of options provided by ggPlot.",
    "supporting": [
      "hdi_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}