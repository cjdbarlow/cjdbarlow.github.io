{
  "hash": "af595437b0d754a17b8924c846199454",
  "result": {
    "markdown": "---\ntitle: \"Electioneering: Part I\"\ndate: 2023-11-06\nimage: assets/electioneering/e1.png\ndescription: |\n  First part of a three-part series looking at how the composition of the Australian Federal parliament might vary under different electoral systems.\n\n  This part provides an overview of the electoral systems under review and preparing the data for analysis.\n\ncategories:\n  - R\n  - auspol\n  \ndf-print: kable\n\nexecute:\n    warning: false\n    message: false\n    echo: true\n    freeze: auto \n---\n\n\nAs an Australian who has been resident in New Zealand for a couple of years I was entitled to vote in the recent general^[Federal, for those of you used to states.] election, and as a big fan of liberal democracy I was keen take part and see how the whole thing worked across the ditch. Although most democracies follow a \"one man, one vote\" system^[Or do now, at least.], the actual make-up of parliament can vary depending on the system used to translate votes into representation^[There are of course lots of ways that this can be distorted - like gerrymandering - but we'll focus just on the voting system here.]. Unlike Australia which uses a Single Transferable Vote (STV) to assign seats in both the upper and lower houses, New Zealand uses Mixed Member Proportional (MMP) voting to allocate all seats in a unicameral parliament.\n\nI thought this was interesting, and so decided to run a few simulations on what the makeup of the Australian parliament, in particular the House of Representatives, would be under different electoral systems. The series is divided into three parts:\n\n* Part One\\\nWill define the question, provide some overview of the different electoral systems, and clean the data.\n* [Part Two](electioneering-part-two.qmd)\\\nConduct the analysis, and generate some preliminary results.\n* [Part Three](electioneering-part-three.qmd)\\\nRefine the analysis, and offer some interpetation.\n\n## The Contenders\n\nWe'll review three different voting systems:\n\n1. **First Past the Post**\\\nFPTP is a simple and widely used system. Each voter casts a single vote for their preferred candidate, and the candidate with the most votes wins, regardless of whether they have an absolute majority. This is a winner-takes-all system, and so tends to favour larger, entrenched parties. It is still widely used in many countries, such as the US, the UK, and Papua New Guinea.\\\n\\\n2. **Single Transferable Vote**\\\nSTV is the system used in Australian elections. Candidates have to reach the quota (>50% of the vote) to be elected, whilst voters preference candidates in order from most-preferred to least-preferred. The counting process occurs in a defined sequence^[This only applies to the lower house. The senate uses a slightly different system, which isn't relevant to us here as we're only looking at the House of Representatives.]:\n    * All first-preference votes are tallied\n    * If a candidate reaches the quota, they win\n    * If no candidate reaches the quota, then the candidate with the lowest number of votes has their votes redistributed to the remaining candidates, based on the preferences of the voter\n    * Each candidates votes are then tallied again, and if the quota is reached then that candidate wins\n    * The redistribution-and-counting cycle continues until someone reaches quota\n3. **Mixed Member Proportional**\\\nMMP is the system used in New Zealand. It is a hybrid voting method that combines elements of both FPTP and proportional representation. Two votes are cast:\n    1. Electorate vote\\\n    Vote for your local electorate - this uses FPTP. New Zealand has 70 electorates, and so 70 electorate MPs.\n    2. Party vote\\\n    This is a national vote which allocates a number of further seats based on the proportion of votes that each party received. The NZ parliament contains 120^[-ish, see the discussion in part 2 about overhang.] total seats, so there are an additional 50 MPs who are placed from the party vote and don't have an electorate - these are known as 'list' MPs. To be eligible to receive seats from the list, a party must win an electorate seat *or* receive >5% of the party vote.\n\n\n## The Plan\n\nThe goal is to see how the makeup of the Australian parliament differs under each of these systems. This will require:\n\n:::column-margin\nI've made an editorial decision here that code used to *conduct* analysis will be included in the documents but most of the code used to *present* analysis will be hidden. This allows the logic of the analysis to be followed along with, without drowning the reader in cosmetics.\n\nIf you want to see (for instance) how the tables are put together, the full source code for this pages are available on the [Github repo](https://www.github.com/chrisjake/cjdbarlow.github.io).\n:::\n\n* Voting data\\\nWe'll use the 2022 [federal election data](https://www.aec.gov.au/election/downloads.htm), courtesy of the Australian Electoral Commission.\n* A map of the electorates\\\nWe'll use the 2021 [Commonwealth Electoral Divisions](https://www.abs.gov.au/statistics/standards/australian-statistical-geography-standard-asgs-edition-3/jul2021-jun2026/access-and-downloads/digital-boundary-files) shapefile, courtesy of the Australian Bureau of Statistics^[The ABS is definitely my favourite government department (a tough decision, obviously) - there's a huge amount of freely available data on a dizzying number of topics that are usually amenable to merging into medical datasets - if you're doing any multi-site or multi-state analysis it is definitely worth poking around here.].\n* A blueprint for a MMP parliament\\\nWe'll make this up.\n\n\n## Data Wrangling\n\nFirst, we'll do the usual environment set up:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Libraries\nrequire(tidyverse)    # For data wrangling\nrequire(magrittr)     # For piping arithmetic (actually)\nrequire(sf)           # For producing maps\nrequire(ggiraph)      # For producing interactive maps without D3\nrequire(patchwork)    # For combining maps\n```\n:::\n\n\n### Voting Data\n\n\n::: {.cell}\n\n:::\n\n\nWe've loaded up the voting data behind the scenes, and are going to tidy up the data types. I'm not sure if we'll need all of these columns yet, but since there aren't that many of them it's convenient to just transform them all now.\n\nWe make the binary `Elected` variables into logical, and identify the key factor variables. We of course don't need to touch the character or numeric variables as R has classified these already^[We also do a cheeky find-and-replace on the `DivisionNm` variable (which identifies the electorates), as special characters can play havoc when it comes time to plot maps. Replacing hyphens with an en dash insures us against typographic shenanigans. I've got my eye on you, Eden-Monaro.].\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Data cleaning\nvotes = votes %>%\n  mutate(DivisionNm = gsub(\"-\", \"–\", DivisionNm),\n         across(ends_with(\"Elected\"), ~ ifelse(. == \"N\", FALSE, TRUE)),\n         across(c(StateAb, DivisionNm, PartyAb, CalculationType), as.factor)) %>%\n  # Pivot out the vote counts and percentages\n  pivot_wider(names_from = CalculationType,\n              values_from = CalculationValue) %>%\n  rename(prefCount = \"Preference Count\",\n         prefPC = \"Preference Percent\",\n         tranCount = \"Transfer Count\",\n         tranPC = \"Transfer Percent\")\n\n\n# Inspect the parties in more detail\nparties = votes %>%\n  group_by(PartyAb, PartyNm) %>%\n  summarise()\n\nhead(parties)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|PartyAb |PartyNm                             |\n|:-------|:-----------------------------------|\n|        |                                    |\n|AJP     |Animal Justice Party                |\n|ALP     |A.L.P.                              |\n|ALP     |Australian Labor Party              |\n|ALP     |Labor                               |\n|ASP     |Shooters, Fishers and Farmers Party |\n\n</div>\n:::\n:::\n\n\nThe other thing that needs correcting are the party names and abbreviations as there are some clear duplicates. There's a couple of judgement calls here, but we follow established conventions and I think the ambiguity reduction is beneficial.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvotes = votes %>%\n  mutate(PartyAb = PartyAb %>%\n           forcats::fct_collapse(\"GRN\" = c(\"GVIC\"),\n                                 \"IND\" = c(\"\")),\n         PartyNm = PartyNm %>%\n           forcats::fct_collapse(\"Independent\" = c(\"\"),\n                                 \"Labor\" = c(\"A.L.P.\", \"Australian Labor Party\"),\n                                 \"Democratic Alliance\" = c(\"Drew Pavlou Democratic Alliance\"),\n                                 \"The Greens\" = c(\"The Greens (WA)\", \"Queensland Greens\"),\n                                 \"Katter's Australian Party\" = c(\"Katter's Australian Party (KAP)\"),\n                                 \"Liberal Party\" = c(\"Liberal National Party of Queensland\"),\n                                 \"The Nationals\" = c(\"National Party\"),\n                                 \"The New Liberals\" = c(\"TNL\"),\n                                 \"Western Australia Party\" = c(\"WESTERN AUSTRALIA PARTY\")))\n```\n:::\n\n\n\n### Geometric Data\n\nWith the voting data cleaned, we can turn our attention to the geometric data. The first order of business is to check that the names of the electorates in our shapefile (`ced`) line up with the names in the voting data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nced = ced %>%\n  mutate(CED_NAME21 = gsub(\"-\", \"–\", CED_NAME21))\n\nx = ced$CED_NAME2\ny = unique(votes$DivisionNm)\n\nsetdiff(x, y)\nsetdiff(y, x)\nrm(x, y)\n```\n:::\n\n\nAll names align except the \"no usual address\" geoms, which we will strip out. We'll also transform our geographic data to use the EPSG:4326/WGS84 coordinate system. Coordinate systems are complex and interesting, it is enough for our purposes to say that this datum lets us plot latitudes and longitudes from a map without having to think too hard about it. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nced = ced %>%\n  ### Drop the unnecessary data and restrict our map geoms to the electorates\n  select(-c(CED_CODE21, STE_CODE21, AUS_CODE21, AUS_NAME21, LOCI_URI21)) %>%\n  filter(CED_NAME21 %in% votes$DivisionNm) %>%\n  mutate(DivisionNm = CED_NAME21) %>%\n  # Transform the CRS\n  st_transform(crs = 4326) %>%\n  # Reduce the window to cover continental Australia\n  st_crop(xmin = 110, xmax = 160,\n          ymin = -45, ymax = -10)\n```\n:::\n\n\nWe should also put together a list of the state capitals. Electorates are drawn with the aim of having a similar number of enrolled voters in each^[Although the actual number can vary quite a bit.], and so tend to cluster around major cities. We'll put some insets into our graphs so changes won't be overshadowed by the large electorates that dominate much of the landmass.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set geography for insets\n# A list of cities, their latitude and longitude, and the radius around them that we'll capture the electorates from\nloc = tribble(~ city, ~ lat      , ~ long     , ~ rad,\n              \"mel\" , -37.8142354, 144.9668884, 45000,\n              \"syd\" , -33.8386302, 151.0310312, 40000,\n              \"bri\" , -27.4671551, 153.0169995, 15000,\n              \"ade\" , -34.7894706, 138.5687859, 15000,\n              \"per\" , -32.0212408, 115.8735055, 15000)\n```\n:::\n\n\nThe last thing we need to do for the setup is define some cosmetic options, so that each party is drawn in an appropriate colour. To spare the tedium, we'll do this off screen. If you want to follow along, the files (and the source data) are in the [Github repository](https://www.github.com/cjdbarlow/cjdbarlow.github.io).\n\nNext time - some actual analysis!\n\n\n::: {.cell}\n\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}